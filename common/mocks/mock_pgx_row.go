// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/sandstone2/fiberpoc/common/interfaces (interfaces: PgxRowInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPgxRow is a mock of PgxRowInterface interface.
type MockPgxRow struct {
	ctrl     *gomock.Controller
	recorder *MockPgxRowMockRecorder
}

// MockPgxRowMockRecorder is the mock recorder for MockPgxRow.
type MockPgxRowMockRecorder struct {
	mock *MockPgxRow
}

// NewMockPgxRow creates a new mock instance.
func NewMockPgxRow(ctrl *gomock.Controller) *MockPgxRow {
	mock := &MockPgxRow{ctrl: ctrl}
	mock.recorder = &MockPgxRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxRow) EXPECT() *MockPgxRowMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockPgxRow) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockPgxRowMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockPgxRow)(nil).Scan), arg0...)
}
