// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/sandstone2/fiberpoc/common/interfaces (interfaces: PgxRowsInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPgxRows is a mock of PgxRowsInterface interface.
type MockPgxRows struct {
	ctrl     *gomock.Controller
	recorder *MockPgxRowsMockRecorder
}

// MockPgxRowsMockRecorder is the mock recorder for MockPgxRows.
type MockPgxRowsMockRecorder struct {
	mock *MockPgxRows
}

// NewMockPgxRows creates a new mock instance.
func NewMockPgxRows(ctrl *gomock.Controller) *MockPgxRows {
	mock := &MockPgxRows{ctrl: ctrl}
	mock.recorder = &MockPgxRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxRows) EXPECT() *MockPgxRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPgxRows) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPgxRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxRows)(nil).Close))
}

// Err mocks base method.
func (m *MockPgxRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockPgxRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockPgxRows)(nil).Err))
}

// Next mocks base method.
func (m *MockPgxRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockPgxRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPgxRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockPgxRows) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockPgxRowsMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockPgxRows)(nil).Scan), arg0...)
}
